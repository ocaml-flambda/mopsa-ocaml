(****************************************************************************)
(*                                                                          *)
(* This file is part of MOPSA, a Modular Open Platform for Static Analysis. *)
(*                                                                          *)
(* Copyright (C) 2017-2019 The MOPSA Project.                               *)
(*                                                                          *)
(* This program is free software: you can redistribute it and/or modify     *)
(* it under the terms of the GNU Lesser General Public License as published *)
(* by the Free Software Foundation, either version 3 of the License, or     *)
(* (at your option) any later version.                                      *)
(*                                                                          *)
(* This program is distributed in the hope that it will be useful,          *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of           *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *)
(* GNU Lesser General Public License for more details.                      *)
(*                                                                          *)
(* You should have received a copy of the GNU Lesser General Public License *)
(* along with this program.  If not, see <http://www.gnu.org/licenses/>.    *)
(*                                                                          *)
(****************************************************************************)

(** Desugaring loops into a usual case *)

open Mopsa
open Framework.Core.Sig.Domain.Stateless
open Universal.Ast
open Ast

module Domain =
  struct

    include GenStatelessDomainId(struct
        let name = "python.desugar.loops"
      end)

    let interface = {
      iexec = {provides = [Zone.Z_py]; uses = []};
      ieval = {provides = []; uses = []}
    }

    let init _ _ flow = flow
    let eval _ _ _ _ = None


    let exec zone stmt man flow =
      let range = srange stmt in
      match skind stmt with
      | S_py_while (test, body, orelse) ->
        let start = Timing.start () in
        let res = man.exec
            (mk_while
               (Utils.mk_builtin_call "bool" [test] range)
               body
               range
            ) flow
                  |> Post.return
                  |> Option.return in
        Debug.debug ~channel:"profiling" "while loop at range %a: %.4f" pp_range range (Timing.stop start);
        res

      | S_py_for(target, iterable, body, orelse) ->
        (* iter is better than iterable.__iter__, as the error
           created is generated by iter() (TypeError: '...' object is
           not iterable), and is not an AttributeError stating that
           __iter__ does not exist *)
        (* same for next *)
        let start = Timing.start () in
        let res =
          man.eval iterable flow  |>
          bind_some (fun iterabletmp flow ->
              man.eval (Utils.mk_builtin_call "iter" [iterabletmp] range) flow |>
              bind_some (fun tmp flow ->
                  let l_else =
                    match skind orelse with
                    | S_block ([],_) -> [mk_stmt S_break range]
                    | _ -> [orelse; mk_stmt S_break range] in
                  let inner_block  =
                    begin match skind body with
                      | S_block (l,_) ->
                        (mk_block
                           ((Utils.mk_try_stopiteration
                               (mk_assign
                                  target
                                  (Utils.mk_builtin_call "next" [tmp] range)
                                  range
                               )
                               (mk_block l_else range)
                               range) :: l) range)
                      | _ ->
                        (mk_block
                           [Utils.mk_try_stopiteration
                              (mk_assign
                                 target
                                 (Utils.mk_builtin_call "next" [tmp] range)
                                 range
                              )
                              (mk_block l_else range) range
                           ; body] range)
                    end in
                  let stmt =
                        mk_while
                          (mk_py_true range)
                          inner_block
                          range
                  in
                  man.exec stmt flow |>
                  Post.return
                )
            )
        in
        Debug.debug ~channel:"profiling" "for loop at range %a: %.4f" pp_range range (Timing.stop start);
        res |> Option.return

      | _ -> None

    let ask _ _ _ = None

  end

let () =
  Framework.Core.Sig.Domain.Stateless.register_domain (module Domain)
