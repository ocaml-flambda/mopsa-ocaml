from typing import overload, AnyStr, Union, Generic, Protocol, Pattern, Text

_PathType = Union[bytes, Text, _PathLike]

class _PathLike(Protocol[AnyStr]):
    def __fspath__(self) -> AnyStr: ...

# FIXME
# @overload
# def expanduser(path: _PathLike[AnyStr]) -> AnyStr: ...
# @overload
def expanduser(path: AnyStr) -> AnyStr: ...

def isfile(path: _PathType) -> bool: ...
def isdir(path: _PathType) -> bool: ...
def islink(path: _PathType) -> bool: ...
def ismount(path: _PathType) -> bool: ...

def exists(path: Union[_PathType, int]) -> bool: ...

# def join(path: AnyStr, *paths: AnyStr) -> AnyStr: ...
@overload
def join(path:AnyStr, path2: AnyStr) -> AnyStr: ...
@overload
def join(path:AnyStr, path2: AnyStr, path3: AnyStr) -> AnyStr: ...


@overload
def dirname(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def dirname(path: AnyStr) -> AnyStr: ...

def indir(AnyStr) -> _PathLike[AnyStr]: ...


@overload
def abspath(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def abspath(path: AnyStr) -> AnyStr: ...
@overload
def basename(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def basename(path: AnyStr) -> AnyStr: ...
@overload
def dirname(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def dirname(path: AnyStr) -> AnyStr: ...
@overload
def expanduser(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def expanduser(path: AnyStr) -> AnyStr: ...
@overload
def expandvars(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def expandvars(path: AnyStr) -> AnyStr: ...
@overload
def normcase(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def normcase(path: AnyStr) -> AnyStr: ...
@overload
def normpath(path: _PathLike[AnyStr]) -> AnyStr: ...
@overload
def normpath(path: AnyStr) -> AnyStr: ...
