# 9 "src/c_stubs_parser/lexer.mll"
 
open Lexing
open Parser

exception SyntaxError of string

(* keyword table *)
let keywords = Hashtbl.create 10
let _ =
  List.iter (fun (a,b) -> Hashtbl.add keywords a b)
    [
     (* Constants *)
     "true",     TRUE;
     "false",    FALSE;

     (* Sections *)
     "requires", REQUIRES;
     "local", LOCAL;
     "assumes", ASSUMES;
     "assigns", ASSIGNS;
     "case", CASE;
     "ensures", ENSURES;
     "predicate", PREDICATE;

     (* Operators *)
     "and",  AND;
     "or",  OR;
     "implies", IMPLIES;
     "forall",  FORALL;
     "exists",  EXISTS;
     "in",    IN;

     (* Types *)
     "char", TCHAR;
     "int", TINT;
     "long", TLONG;     
     "double", TDOUBLE;
     "float", TFLOAT;
     "signed", UNSIGNED;
     "unsigned", UNSIGNED;
     "const", CONST;
     "struct", STRUCT;
     "union", UNION;     


     (* Built-ins *)
     "old",     OLD;
     "size",   SIZE;
     "offset", OFFSET;
     "base", BASE;
     "new", NEW;
     "free", FREE;
     "return", RETURN;
   ]


# 59 "_build/c_stubs_parser/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\218\255\219\255\222\255\226\255\001\000\002\000\003\000\
    \066\000\069\000\237\255\238\255\240\255\001\000\244\255\245\255\
    \246\255\002\000\248\255\249\255\083\000\251\255\163\000\238\000\
    \004\001\014\001\254\255\001\000\003\000\242\255\248\000\036\001\
    \046\001\058\001\068\001\220\255\230\255\224\255\234\255\225\255\
    \233\255\232\255\231\255\229\255\038\001\245\255\040\001\112\001\
    \255\255\248\255\249\255\250\255\251\255\252\255\253\255\254\255\
    \212\000\253\255\004\000\254\255\051\000\255\255";
  Lexing.lex_backtrk =
   "\003\000\255\255\255\255\255\255\255\255\027\000\032\000\034\000\
    \020\000\019\000\255\255\255\255\255\255\014\000\255\255\255\255\
    \255\255\008\000\255\255\255\255\005\000\255\255\005\000\003\000\
    \002\000\016\000\255\255\001\000\000\000\255\255\002\000\255\255\
    \003\000\255\255\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\008\000\009\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255\001\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\046\000\000\000\046\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \059\000\000\000\255\255\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\026\000\026\000\028\000\027\000\057\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\006\000\021\000\028\000\000\000\000\000\013\000\036\000\
    \017\000\016\000\011\000\012\000\035\000\025\000\023\000\010\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\015\000\014\000\009\000\007\000\008\000\042\000\
    \041\000\020\000\020\000\020\000\020\000\022\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\019\000\061\000\018\000\004\000\020\000\
    \000\000\020\000\020\000\020\000\020\000\022\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\005\000\043\000\003\000\040\000\
    \039\000\037\000\038\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\000\000\000\000\
    \000\000\000\000\020\000\000\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\033\000\000\000\
    \033\000\000\000\000\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\000\000\057\000\000\000\
    \000\000\058\000\000\000\000\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\060\000\000\000\
    \001\000\000\000\020\000\000\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\023\000\031\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \048\000\031\000\255\255\000\000\029\000\000\000\000\000\033\000\
    \000\000\033\000\000\000\031\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \000\000\031\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
    \000\000\000\000\047\000\000\000\255\255\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\055\000\
    \000\000\000\000\000\000\020\000\000\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
    \000\000\000\000\053\000\000\000\255\255\000\000\052\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
    \000\000\000\000\050\000\000\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\028\000\000\000\058\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\028\000\255\255\255\255\000\000\013\000\
    \000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\005\000\000\000\008\000\
    \008\000\009\000\009\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\255\255\255\255\
    \255\255\255\255\020\000\255\255\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\022\000\255\255\
    \022\000\255\255\255\255\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\255\255\056\000\255\255\
    \255\255\056\000\255\255\255\255\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\056\000\255\255\
    \000\000\255\255\022\000\255\255\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\024\000\023\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \044\000\024\000\046\000\255\255\025\000\255\255\255\255\031\000\
    \255\255\031\000\255\255\023\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \255\255\024\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\255\255\255\255\
    \255\255\255\255\044\000\255\255\046\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\047\000\
    \255\255\255\255\255\255\034\000\255\255\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\047\000\255\255\255\255\255\255\
    \255\255\255\255\047\000\255\255\056\000\255\255\047\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\047\000\255\255\
    \255\255\255\255\047\000\255\255\047\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\044\000\255\255\
    \046\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 79 "src/c_stubs_parser/lexer.mll"
             ( read lexbuf )
# 269 "_build/c_stubs_parser/lexer.ml"

  | 1 ->
# 80 "src/c_stubs_parser/lexer.mll"
             ( new_line lexbuf; read lexbuf )
# 274 "_build/c_stubs_parser/lexer.ml"

  | 2 ->
# 82 "src/c_stubs_parser/lexer.mll"
             ( INT (Z.of_string (Lexing.lexeme lexbuf)) )
# 279 "_build/c_stubs_parser/lexer.ml"

  | 3 ->
# 83 "src/c_stubs_parser/lexer.mll"
             ( FLOAT (float_of_string (Lexing.lexeme lexbuf)) )
# 284 "_build/c_stubs_parser/lexer.ml"

  | 4 ->
# 84 "src/c_stubs_parser/lexer.mll"
             ( read_string (Buffer.create 17) lexbuf )
# 289 "_build/c_stubs_parser/lexer.ml"

  | 5 ->
let
# 86 "src/c_stubs_parser/lexer.mll"
          x
# 295 "_build/c_stubs_parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 86 "src/c_stubs_parser/lexer.mll"
             ( try Hashtbl.find keywords x with Not_found -> IDENT x )
# 299 "_build/c_stubs_parser/lexer.ml"

  | 6 ->
# 88 "src/c_stubs_parser/lexer.mll"
             ( LBRACK )
# 304 "_build/c_stubs_parser/lexer.ml"

  | 7 ->
# 89 "src/c_stubs_parser/lexer.mll"
             ( RBRACK )
# 309 "_build/c_stubs_parser/lexer.ml"

  | 8 ->
# 90 "src/c_stubs_parser/lexer.mll"
             ( LPAR )
# 314 "_build/c_stubs_parser/lexer.ml"

  | 9 ->
# 91 "src/c_stubs_parser/lexer.mll"
             ( RPAR )
# 319 "_build/c_stubs_parser/lexer.ml"

  | 10 ->
# 92 "src/c_stubs_parser/lexer.mll"
             ( COLON )
# 324 "_build/c_stubs_parser/lexer.ml"

  | 11 ->
# 93 "src/c_stubs_parser/lexer.mll"
             ( SEMICOL )
# 329 "_build/c_stubs_parser/lexer.ml"

  | 12 ->
# 95 "src/c_stubs_parser/lexer.mll"
             ( DOT )
# 334 "_build/c_stubs_parser/lexer.ml"

  | 13 ->
# 96 "src/c_stubs_parser/lexer.mll"
             ( ARROW )
# 339 "_build/c_stubs_parser/lexer.ml"

  | 14 ->
# 97 "src/c_stubs_parser/lexer.mll"
             ( ADDROF )
# 344 "_build/c_stubs_parser/lexer.ml"

  | 15 ->
# 99 "src/c_stubs_parser/lexer.mll"
           ( PLUS )
# 349 "_build/c_stubs_parser/lexer.ml"

  | 16 ->
# 100 "src/c_stubs_parser/lexer.mll"
           ( MINUS )
# 354 "_build/c_stubs_parser/lexer.ml"

  | 17 ->
# 101 "src/c_stubs_parser/lexer.mll"
           ( STAR )
# 359 "_build/c_stubs_parser/lexer.ml"

  | 18 ->
# 102 "src/c_stubs_parser/lexer.mll"
           ( DIV )
# 364 "_build/c_stubs_parser/lexer.ml"

  | 19 ->
# 103 "src/c_stubs_parser/lexer.mll"
           ( LT )
# 369 "_build/c_stubs_parser/lexer.ml"

  | 20 ->
# 104 "src/c_stubs_parser/lexer.mll"
           ( GT )
# 374 "_build/c_stubs_parser/lexer.ml"

  | 21 ->
# 105 "src/c_stubs_parser/lexer.mll"
           ( LE )
# 379 "_build/c_stubs_parser/lexer.ml"

  | 22 ->
# 106 "src/c_stubs_parser/lexer.mll"
           ( GE )
# 384 "_build/c_stubs_parser/lexer.ml"

  | 23 ->
# 107 "src/c_stubs_parser/lexer.mll"
           ( EQ )
# 389 "_build/c_stubs_parser/lexer.ml"

  | 24 ->
# 108 "src/c_stubs_parser/lexer.mll"
           ( NEQ )
# 394 "_build/c_stubs_parser/lexer.ml"

  | 25 ->
# 109 "src/c_stubs_parser/lexer.mll"
           ( LAND )
# 399 "_build/c_stubs_parser/lexer.ml"

  | 26 ->
# 110 "src/c_stubs_parser/lexer.mll"
           ( LOR )
# 404 "_build/c_stubs_parser/lexer.ml"

  | 27 ->
# 111 "src/c_stubs_parser/lexer.mll"
           ( BOR )
# 409 "_build/c_stubs_parser/lexer.ml"

  | 28 ->
# 112 "src/c_stubs_parser/lexer.mll"
           ( BAND )
# 414 "_build/c_stubs_parser/lexer.ml"

  | 29 ->
# 113 "src/c_stubs_parser/lexer.mll"
           ( BXOR )
# 419 "_build/c_stubs_parser/lexer.ml"

  | 30 ->
# 114 "src/c_stubs_parser/lexer.mll"
           ( RSHIFT )
# 424 "_build/c_stubs_parser/lexer.ml"

  | 31 ->
# 115 "src/c_stubs_parser/lexer.mll"
           ( LSHIFT )
# 429 "_build/c_stubs_parser/lexer.ml"

  | 32 ->
# 116 "src/c_stubs_parser/lexer.mll"
           ( LNOT )
# 434 "_build/c_stubs_parser/lexer.ml"

  | 33 ->
# 117 "src/c_stubs_parser/lexer.mll"
           ( BNOT )
# 439 "_build/c_stubs_parser/lexer.ml"

  | 34 ->
# 119 "src/c_stubs_parser/lexer.mll"
           ( ASSIGN )
# 444 "_build/c_stubs_parser/lexer.ml"

  | 35 ->
# 121 "src/c_stubs_parser/lexer.mll"
         ( read_comment lexbuf; read lexbuf )
# 449 "_build/c_stubs_parser/lexer.ml"

  | 36 ->
# 123 "src/c_stubs_parser/lexer.mll"
      ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 454 "_build/c_stubs_parser/lexer.ml"

  | 37 ->
# 124 "src/c_stubs_parser/lexer.mll"
             ( EOF )
# 459 "_build/c_stubs_parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 44
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 128 "src/c_stubs_parser/lexer.mll"
              ( STRING (Buffer.contents buf) )
# 471 "_build/c_stubs_parser/lexer.ml"

  | 1 ->
# 129 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 476 "_build/c_stubs_parser/lexer.ml"

  | 2 ->
# 130 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 481 "_build/c_stubs_parser/lexer.ml"

  | 3 ->
# 131 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 486 "_build/c_stubs_parser/lexer.ml"

  | 4 ->
# 132 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 491 "_build/c_stubs_parser/lexer.ml"

  | 5 ->
# 133 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 496 "_build/c_stubs_parser/lexer.ml"

  | 6 ->
# 134 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 501 "_build/c_stubs_parser/lexer.ml"

  | 7 ->
# 135 "src/c_stubs_parser/lexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 506 "_build/c_stubs_parser/lexer.ml"

  | 8 ->
# 137 "src/c_stubs_parser/lexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      read_string buf lexbuf
    )
# 513 "_build/c_stubs_parser/lexer.ml"

  | 9 ->
# 140 "src/c_stubs_parser/lexer.mll"
      ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 518 "_build/c_stubs_parser/lexer.ml"

  | 10 ->
# 141 "src/c_stubs_parser/lexer.mll"
        ( raise (SyntaxError ("String is not terminated")) )
# 523 "_build/c_stubs_parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

and read_comment lexbuf =
   __ocaml_lex_read_comment_rec lexbuf 56
and __ocaml_lex_read_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 144 "src/c_stubs_parser/lexer.mll"
       ( () )
# 535 "_build/c_stubs_parser/lexer.ml"

  | 1 ->
# 145 "src/c_stubs_parser/lexer.mll"
                ( read_comment lexbuf )
# 540 "_build/c_stubs_parser/lexer.ml"

  | 2 ->
# 146 "src/c_stubs_parser/lexer.mll"
          ( new_line lexbuf; read_comment lexbuf )
# 545 "_build/c_stubs_parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_comment_rec lexbuf __ocaml_lex_state

;;

