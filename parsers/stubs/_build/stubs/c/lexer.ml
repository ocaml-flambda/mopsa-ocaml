# 1 "src/stubs/c/lexer.mll"
 
open Lexing
open Parser

exception SyntaxError of string

let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1
    }

# 16 "_build/stubs/c/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\241\255\242\255\243\255\244\255\245\255\246\255\247\255\
    \248\255\249\255\000\000\000\000\022\000\055\000\080\000\032\000\
    \254\255\001\000\003\000\090\000\109\000\119\000\134\000\000\000\
    \012\000\251\255\007\000\003\000\018\000\250\255\002\000\245\255\
    \003\000\101\000\255\255\248\255\249\255\250\255\251\255\252\255\
    \253\255\254\255";
  Lexing.lex_backtrk =
   "\003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\013\000\013\000\013\000\003\000\002\000\013\000\
    \255\255\001\000\000\000\002\000\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\032\000\000\000\
    \032\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\016\000\016\000\018\000\017\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\000\000\009\000\018\000\034\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\015\000\013\000\000\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\000\000\022\000\000\000\012\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\006\000\000\000\005\000\033\000\255\255\
    \000\000\026\000\000\000\000\000\000\000\012\000\010\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\025\000\023\000\027\000\011\000\024\000\028\000\029\000\
    \000\000\000\000\000\000\008\000\020\000\007\000\013\000\000\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\041\000\020\000\000\000\000\000\
    \022\000\000\000\022\000\000\000\020\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\000\000\020\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\040\000\000\000\000\000\000\000\000\000\000\000\039\000\
    \000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\000\000\000\000\036\000\
    \000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\031\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\017\000\018\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\018\000\030\000\032\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\012\000\255\255\012\000\255\255\000\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\255\255\000\000\255\255\000\000\030\000\032\000\
    \255\255\010\000\255\255\255\255\255\255\000\000\000\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\024\000\011\000\026\000\000\000\023\000\027\000\028\000\
    \255\255\255\255\255\255\000\000\013\000\000\000\014\000\255\255\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\033\000\014\000\255\255\255\255\
    \020\000\255\255\020\000\255\255\013\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\255\255\255\255\255\255\014\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \255\255\033\000\255\255\255\255\255\255\255\255\255\255\033\000\
    \255\255\255\255\255\255\033\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\033\000\255\255\255\255\255\255\033\000\
    \255\255\033\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\030\000\032\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 28 "src/stubs/c/lexer.mll"
             ( read lexbuf )
# 160 "_build/stubs/c/lexer.ml"

  | 1 ->
# 29 "src/stubs/c/lexer.mll"
             ( next_line lexbuf; read lexbuf )
# 165 "_build/stubs/c/lexer.ml"

  | 2 ->
# 30 "src/stubs/c/lexer.mll"
             ( INT (Z.of_string (Lexing.lexeme lexbuf)) )
# 170 "_build/stubs/c/lexer.ml"

  | 3 ->
# 31 "src/stubs/c/lexer.mll"
             ( FLOAT (float_of_string (Lexing.lexeme lexbuf)) )
# 175 "_build/stubs/c/lexer.ml"

  | 4 ->
# 32 "src/stubs/c/lexer.mll"
             ( TRUE )
# 180 "_build/stubs/c/lexer.ml"

  | 5 ->
# 33 "src/stubs/c/lexer.mll"
             ( FALSE )
# 185 "_build/stubs/c/lexer.ml"

  | 6 ->
# 34 "src/stubs/c/lexer.mll"
             ( read_string (Buffer.create 17) lexbuf )
# 190 "_build/stubs/c/lexer.ml"

  | 7 ->
# 35 "src/stubs/c/lexer.mll"
             ( LBRACE )
# 195 "_build/stubs/c/lexer.ml"

  | 8 ->
# 36 "src/stubs/c/lexer.mll"
             ( RBRACE )
# 200 "_build/stubs/c/lexer.ml"

  | 9 ->
# 37 "src/stubs/c/lexer.mll"
             ( LBRACK )
# 205 "_build/stubs/c/lexer.ml"

  | 10 ->
# 38 "src/stubs/c/lexer.mll"
             ( RBRACK )
# 210 "_build/stubs/c/lexer.ml"

  | 11 ->
# 39 "src/stubs/c/lexer.mll"
             ( COLON )
# 215 "_build/stubs/c/lexer.ml"

  | 12 ->
# 40 "src/stubs/c/lexer.mll"
             ( COMMA )
# 220 "_build/stubs/c/lexer.ml"

  | 13 ->
# 41 "src/stubs/c/lexer.mll"
      ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 225 "_build/stubs/c/lexer.ml"

  | 14 ->
# 42 "src/stubs/c/lexer.mll"
             ( EOF )
# 230 "_build/stubs/c/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 30
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "src/stubs/c/lexer.mll"
              ( STRING (Buffer.contents buf) )
# 242 "_build/stubs/c/lexer.ml"

  | 1 ->
# 47 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 247 "_build/stubs/c/lexer.ml"

  | 2 ->
# 48 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 252 "_build/stubs/c/lexer.ml"

  | 3 ->
# 49 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 257 "_build/stubs/c/lexer.ml"

  | 4 ->
# 50 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 262 "_build/stubs/c/lexer.ml"

  | 5 ->
# 51 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 267 "_build/stubs/c/lexer.ml"

  | 6 ->
# 52 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 272 "_build/stubs/c/lexer.ml"

  | 7 ->
# 53 "src/stubs/c/lexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 277 "_build/stubs/c/lexer.ml"

  | 8 ->
# 55 "src/stubs/c/lexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      read_string buf lexbuf
    )
# 284 "_build/stubs/c/lexer.ml"

  | 9 ->
# 58 "src/stubs/c/lexer.mll"
      ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 289 "_build/stubs/c/lexer.ml"

  | 10 ->
# 59 "src/stubs/c/lexer.mll"
        ( raise (SyntaxError ("String is not terminated")) )
# 294 "_build/stubs/c/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

;;

