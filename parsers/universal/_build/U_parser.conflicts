
** Conflict (reduce/reduce) in state 161.
** Token involved: TOK_EOF
** This state is reached from file after reading:

stat 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF // lookahead token appears
(?)

** In state 161, looking ahead at TOK_EOF, reducing production
** list(ext(stat)) -> 
** is permitted because of the following sub-derivation:

block_no_curly // lookahead token is inherited
list(ext(stat)) // lookahead token is inherited
stat list(ext(stat)) // lookahead token is inherited
     . 

** In state 161, looking ahead at TOK_EOF, reducing production
** prog -> stat 
** is permitted because of the following sub-derivation:

stat . 

** Conflict (shift/reduce) in state 159.
** Token involved: TOK_LBRACKET
** This state is reached from file after reading:

typ var TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(tvar))) TOK_RPAREN TOK_LCURLY declaration 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
fundec prog 
(?)

** In state 159, looking ahead at TOK_LBRACKET, reducing production
** list(ext(declaration)) -> 
** is permitted because of the following sub-derivation:

typ var TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(tvar))) TOK_RPAREN TOK_LCURLY list(ext(declaration)) stat TOK_RCURLY // lookahead token appears because stat can begin with TOK_LBRACKET
                                                                                               declaration list(ext(declaration)) // lookahead token is inherited
                                                                                                           . 

** In state 159, looking ahead at TOK_LBRACKET, shifting is permitted
** because of the following sub-derivation:

typ var TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(tvar))) TOK_RPAREN TOK_LCURLY list(ext(declaration)) stat TOK_RCURLY 
                                                                                               declaration list(ext(declaration)) 
                                                                                                           declaration list(ext(declaration)) 
                                                                                                           tvar TOK_SEMICOLON 
                                                                                                           typ TOK_id 
                                                                                                           . TOK_LBRACKET typ TOK_RBRACKET 

** Conflict (shift/reduce) in state 150.
** Token involved: TOK_LBRACKET
** This state is reached from file after reading:

typ var TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(tvar))) TOK_RPAREN TOK_LCURLY 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
fundec prog 
(?)

** In state 150, looking ahead at TOK_LBRACKET, reducing production
** list(ext(declaration)) -> 
** is permitted because of the following sub-derivation:

typ var TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(tvar))) TOK_RPAREN TOK_LCURLY list(ext(declaration)) stat TOK_RCURLY // lookahead token appears because stat can begin with TOK_LBRACKET
                                                                                               . 

** In state 150, looking ahead at TOK_LBRACKET, shifting is permitted
** because of the following sub-derivation:

typ var TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(tvar))) TOK_RPAREN TOK_LCURLY list(ext(declaration)) stat TOK_RCURLY 
                                                                                               declaration list(ext(declaration)) 
                                                                                               tvar TOK_SEMICOLON 
                                                                                               typ TOK_id 
                                                                                               . TOK_LBRACKET typ TOK_RBRACKET 

** Conflict (shift/reduce) in state 128.
** Token involved: TOK_SEMICOLON
** This state is reached from file after reading:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 128, looking ahead at TOK_SEMICOLON, reducing production
** option(TOK_SEMICOLON) -> 
** is permitted because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) // lookahead token appears because option(TOK_SEMICOLON) can begin with TOK_SEMICOLON
                                     TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) // lookahead token is inherited
                                                                               . 

** In state 128, looking ahead at TOK_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) 
                                     TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) 
                                                                               . TOK_SEMICOLON 

** Conflict (shift/reduce) in state 120.
** Token involved: TOK_SEMICOLON
** This state is reached from file after reading:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN TOK_IF TOK_LPAREN expr TOK_RPAREN stat TOK_ELSE stat 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 120, looking ahead at TOK_SEMICOLON, reducing production
** option(TOK_SEMICOLON) -> 
** is permitted because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) // lookahead token appears because option(TOK_SEMICOLON) can begin with TOK_SEMICOLON
                                     TOK_IF TOK_LPAREN expr TOK_RPAREN stat TOK_ELSE stat option(TOK_SEMICOLON) // lookahead token is inherited
                                                                                          . 

** In state 120, looking ahead at TOK_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) 
                                     TOK_IF TOK_LPAREN expr TOK_RPAREN stat TOK_ELSE stat option(TOK_SEMICOLON) 
                                                                                          . TOK_SEMICOLON 

** Conflict (shift/reduce) in state 118.
** Tokens involved: TOK_SEMICOLON TOK_ELSE
** The following explanations concentrate on token TOK_SEMICOLON.
** This state is reached from file after reading:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN TOK_IF TOK_LPAREN expr TOK_RPAREN stat 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 118, looking ahead at TOK_SEMICOLON, reducing production
** option(TOK_SEMICOLON) -> 
** is permitted because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) // lookahead token appears because option(TOK_SEMICOLON) can begin with TOK_SEMICOLON
                                     TOK_IF TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) // lookahead token is inherited
                                                                            . 

** In state 118, looking ahead at TOK_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) 
                                     TOK_IF TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) 
                                                                            . TOK_SEMICOLON 

** Conflict (shift/reduce) in state 111.
** Token involved: TOK_SEMICOLON
** This state is reached from file after reading:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 111, looking ahead at TOK_SEMICOLON, reducing production
** option(TOK_SEMICOLON) -> 
** is permitted because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) // lookahead token appears because option(TOK_SEMICOLON) can begin with TOK_SEMICOLON
                                     TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) // lookahead token is inherited
                                                                                               . 

** In state 111, looking ahead at TOK_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

TOK_WHILE TOK_LPAREN expr TOK_RPAREN stat option(TOK_SEMICOLON) 
                                     TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                                                               . TOK_SEMICOLON 

** Conflict (shift/reduce) in state 105.
** Token involved: TOK_RBRACKET
** This state is reached from file after reading:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr TOK_LBRACKET expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 105, looking ahead at TOK_RBRACKET, shifting is permitted
** because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                expr TOK_LBRACKET expr . TOK_RBRACKET 

** In state 105, looking ahead at TOK_RBRACKET, reducing production
** separated_nonempty_list(TOK_SEMICOLON,ext(expr)) -> expr 
** is permitted because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                     expr TOK_EQUAL expr TOK_SEMICOLON 
                                                     array_constant 
                                                     TOK_LBRACKET loption(separated_nonempty_list(TOK_SEMICOLON,ext(expr))) TOK_RBRACKET // lookahead token appears
                                                                  separated_nonempty_list(TOK_SEMICOLON,ext(expr)) // lookahead token is inherited
                                                                  expr . 

** Conflict (shift/reduce/reduce) in state 103.
** Tokens involved: TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_PLUS.
** This state is reached from file after reading:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr TOK_MINUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 103, looking ahead at TOK_PLUS, reducing production
** expr -> TOK_MINUS expr 
** is permitted because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                     expr TOK_EQUAL expr TOK_SEMICOLON 
                                                     expr TOK_PLUS expr // lookahead token appears
                                                     TOK_MINUS expr . 

** In state 103, looking ahead at TOK_PLUS, shifting is permitted
** because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                expr TOK_MINUS expr 
                                                               expr . TOK_PLUS expr 

** In state 103, looking ahead at TOK_PLUS, reducing production
** expr -> expr TOK_MINUS expr 
** is permitted because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) // lookahead token appears because stat can begin with TOK_PLUS
                                                expr TOK_MINUS expr . 

** Conflict (shift/reduce/reduce) in state 101.
** Tokens involved: TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_PLUS.
** This state is reached from file after reading:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr TOK_PLUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 101, looking ahead at TOK_PLUS, reducing production
** expr -> TOK_PLUS expr 
** is permitted because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                     expr TOK_EQUAL expr TOK_SEMICOLON 
                                                     expr TOK_PLUS expr // lookahead token appears
                                                     TOK_PLUS expr . 

** In state 101, looking ahead at TOK_PLUS, shifting is permitted
** because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                expr TOK_PLUS expr 
                                                              expr . TOK_PLUS expr 

** In state 101, looking ahead at TOK_PLUS, reducing production
** expr -> expr TOK_PLUS expr 
** is permitted because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) // lookahead token appears because stat can begin with TOK_PLUS
                                                expr TOK_PLUS expr . 

** Conflict (shift/reduce) in state 82.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

TOK_PLUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 82, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> TOK_PLUS expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
TOK_PLUS expr . 

** In state 82, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

TOK_PLUS expr 
         expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 81.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

TOK_MINUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 81, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> TOK_MINUS expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
TOK_MINUS expr . 

** In state 81, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

TOK_MINUS expr 
          expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 72.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

TOK_EXCLAIM expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 72, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> TOK_EXCLAIM expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
TOK_EXCLAIM expr . 

** In state 72, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

TOK_EXCLAIM expr 
            expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 64.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

expr TOK_AND_AND expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 64, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

expr TOK_AND_AND expr 
                 expr . TOK_NOT_EQUAL expr 

** In state 64, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> expr TOK_AND_AND expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
expr TOK_AND_AND expr . 

** Conflict (shift/reduce) in state 62.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

expr TOK_BAR_BAR expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 62, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

expr TOK_BAR_BAR expr 
                 expr . TOK_NOT_EQUAL expr 

** In state 62, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> expr TOK_BAR_BAR expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
expr TOK_BAR_BAR expr . 

** Conflict (shift/reduce) in state 60.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_CONCAT expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 60, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_CONCAT expr 
                expr . TOK_STAR expr 

** In state 60, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_CONCAT expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_CONCAT expr . 

** Conflict (shift/reduce) in state 58.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

expr TOK_DIVIDE expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 58, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> expr TOK_DIVIDE expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
expr TOK_DIVIDE expr . 

** In state 58, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

expr TOK_DIVIDE expr 
                expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 56.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_EQUAL_EQUAL expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 56, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_EQUAL_EQUAL expr 
                     expr . TOK_STAR expr 

** In state 56, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_EQUAL_EQUAL expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_EQUAL_EQUAL expr . 

** Conflict (shift/reduce) in state 54.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_GREATER expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 54, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_GREATER expr 
                 expr . TOK_STAR expr 

** In state 54, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_GREATER expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_GREATER expr . 

** Conflict (shift/reduce) in state 52.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_GREATER_EQUAL expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 52, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_GREATER_EQUAL expr 
                       expr . TOK_STAR expr 

** In state 52, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_GREATER_EQUAL expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_GREATER_EQUAL expr . 

** Conflict (shift/reduce) in state 47.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_LESS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 47, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_LESS expr 
              expr . TOK_STAR expr 

** In state 47, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_LESS expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_LESS expr . 

** Conflict (shift/reduce) in state 45.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

expr TOK_MINUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 45, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> expr TOK_MINUS expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
expr TOK_MINUS expr . 

** In state 45, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

expr TOK_MINUS expr 
               expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 43.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_LESS_EQUAL expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 43, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_LESS_EQUAL expr 
                    expr . TOK_STAR expr 

** In state 43, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_LESS_EQUAL expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_LESS_EQUAL expr . 

** Conflict (shift/reduce) in state 41.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

expr TOK_PLUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 41, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> expr TOK_PLUS expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
expr TOK_PLUS expr . 

** In state 41, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

expr TOK_PLUS expr 
              expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 39.
** Tokens involved: TOK_STAR TOK_PLUS TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_CONCAT TOK_BAR_BAR TOK_AND_AND
** The following explanations concentrate on token TOK_STAR.
** This state is reached from file after reading:

expr TOK_NOT_EQUAL expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 39, looking ahead at TOK_STAR, shifting is permitted
** because of the following sub-derivation:

expr TOK_NOT_EQUAL expr 
                   expr . TOK_STAR expr 

** In state 39, looking ahead at TOK_STAR, reducing production
** expr -> expr TOK_NOT_EQUAL expr 
** is permitted because of the following sub-derivation:

expr TOK_STAR expr // lookahead token appears
expr TOK_NOT_EQUAL expr . 

** Conflict (shift/reduce) in state 37.
** Tokens involved: TOK_NOT_EQUAL TOK_LESS_EQUAL TOK_LESS TOK_LBRACKET TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_CONCAT
** The following explanations concentrate on token TOK_NOT_EQUAL.
** This state is reached from file after reading:

expr TOK_STAR expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
expr TOK_EQUAL expr TOK_SEMICOLON 
(?)

** In state 37, looking ahead at TOK_NOT_EQUAL, reducing production
** expr -> expr TOK_STAR expr 
** is permitted because of the following sub-derivation:

expr TOK_NOT_EQUAL expr // lookahead token appears
expr TOK_STAR expr . 

** In state 37, looking ahead at TOK_NOT_EQUAL, shifting is permitted
** because of the following sub-derivation:

expr TOK_STAR expr 
              expr . TOK_NOT_EQUAL expr 

** Conflict (shift/reduce) in state 27.
** Token involved: TOK_LPAREN
** This state is reached from file after reading:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA var 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
prog TOK_EOF 
stat 
(?)

** In state 27, looking ahead at TOK_LPAREN, reducing production
** expr -> var 
** is permitted because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) // lookahead token appears because stat can begin with TOK_LPAREN
                                                var . 

** In state 27, looking ahead at TOK_LPAREN, shifting is permitted
** because of the following sub-derivation:

TOK_FOR TOK_LPAREN var TOK_COMMA expr TOK_COMMA expr stat option(TOK_SEMICOLON) 
                                                var . TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(expr))) TOK_RPAREN 
