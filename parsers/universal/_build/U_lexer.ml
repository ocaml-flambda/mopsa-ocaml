# 5 "src/U_lexer.mll"
 
open Lexing
open U_ast
open U_parser

let character_of_string s =
(* TODO: faire Ã§a bien: *)
s.[0]
(* keyword table *)
let kwd_table = Hashtbl.create 10
let _ =
  List.iter (fun (a,b) -> Hashtbl.add kwd_table a b)
    [
     (* types *)
     "int",    TOK_INT;
     "real",   TOK_REAL;
     "string", TOK_STRING;
     "char",   TOK_CHAR;

     (* constants *)
     "true",   TOK_TRUE;
     "false",  TOK_FALSE;

     (* expression operators *)
     "rand",   TOK_RAND;

     (* control flow *)
     "while",  TOK_WHILE;
     "for",    TOK_FOR;
     "if",     TOK_IF;
     "else",   TOK_ELSE;
     "return", TOK_RETURN;

     (* special statements *)
     "assert", TOK_ASSERT;
     "print",  TOK_PRINT;
     "print_all",  TOK_PRINT_ALL;
   ]


# 43 "_build/U_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\222\255\003\000\005\000\224\255\226\255\227\255\080\000\
    \092\000\231\255\233\255\234\255\003\000\008\000\002\000\031\000\
    \033\000\108\000\035\000\246\255\247\255\248\255\249\255\250\255\
    \251\255\252\255\253\255\254\255\165\000\238\255\141\000\228\255\
    \241\255\240\255\239\255\237\255\235\255\111\000\240\000\007\001\
    \143\000\104\000\128\000\017\001\065\001\159\000\001\000\253\255\
    \254\255\011\000\255\255\002\000\105\000\255\255\139\000\140\000\
    \255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\032\000\031\000\255\255\255\255\255\255\025\000\
    \025\000\255\255\255\255\255\255\019\000\255\255\023\000\013\000\
    \012\000\011\000\010\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\030\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\026\000\255\255\025\000\
    \255\255\255\255\025\000\025\000\025\000\255\255\002\000\255\255\
    \255\255\001\000\255\255\255\255\001\000\255\255\255\255\001\000\
    \255\255";
  Lexing.lex_default =
   "\255\255\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\048\000\255\255\000\000\
    \000\000\255\255\000\000\052\000\052\000\000\000\055\000\055\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\004\000\047\000\002\000\003\000\002\000\004\000\
    \002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\018\000\006\000\002\000\053\000\002\000\013\000\005\000\
    \027\000\026\000\021\000\020\000\010\000\019\000\035\000\017\000\
    \008\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\050\000\011\000\016\000\014\000\015\000\034\000\
    \009\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\025\000\033\000\024\000\032\000\028\000\
    \029\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\023\000\012\000\022\000\037\000\036\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\037\000\255\255\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\031\000\255\255\
    \042\000\042\000\255\255\030\000\000\000\000\000\041\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\047\000\000\000\040\000\046\000\000\000\000\000\039\000\
    \042\000\042\000\056\000\255\255\038\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\039\000\000\000\000\000\041\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
    \000\000\049\000\000\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\038\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\042\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \001\000\000\000\255\255\000\000\028\000\000\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\044\000\044\000\044\000\044\000\044\000\044\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \043\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \044\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\046\000\002\000\000\000\003\000\003\000\
    \002\000\255\255\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\002\000\051\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\000\000\000\000\000\000\000\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\016\000\000\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\012\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\008\000\052\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\017\000\030\000\
    \041\000\041\000\030\000\017\000\255\255\255\255\008\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\045\000\255\255\008\000\045\000\255\255\255\255\007\000\
    \042\000\042\000\054\000\055\000\008\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\008\000\255\255\255\255\008\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\255\255\
    \255\255\045\000\255\255\008\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\008\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\042\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \000\000\255\255\051\000\255\255\028\000\255\255\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\039\000\255\255\
    \255\255\052\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \043\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\044\000\044\000\044\000\044\000\044\000\044\000\
    \255\255\255\255\255\255\054\000\055\000\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\000\
    \044\000\255\255\044\000\044\000\044\000\044\000\044\000\044\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 68 "src/U_lexer.mll"
                                                          id
# 242 "_build/U_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "src/U_lexer.mll"
( try Hashtbl.find kwd_table id with Not_found -> TOK_id id )
# 246 "_build/U_lexer.ml"

  | 1 ->
# 72 "src/U_lexer.mll"
         ( TOK_LPAREN )
# 251 "_build/U_lexer.ml"

  | 2 ->
# 73 "src/U_lexer.mll"
         ( TOK_RPAREN )
# 256 "_build/U_lexer.ml"

  | 3 ->
# 74 "src/U_lexer.mll"
         ( TOK_LBRACKET )
# 261 "_build/U_lexer.ml"

  | 4 ->
# 75 "src/U_lexer.mll"
         ( TOK_RBRACKET )
# 266 "_build/U_lexer.ml"

  | 5 ->
# 76 "src/U_lexer.mll"
         ( TOK_LCURLY )
# 271 "_build/U_lexer.ml"

  | 6 ->
# 77 "src/U_lexer.mll"
         ( TOK_RCURLY )
# 276 "_build/U_lexer.ml"

  | 7 ->
# 78 "src/U_lexer.mll"
         ( TOK_STAR )
# 281 "_build/U_lexer.ml"

  | 8 ->
# 79 "src/U_lexer.mll"
         ( TOK_PLUS )
# 286 "_build/U_lexer.ml"

  | 9 ->
# 80 "src/U_lexer.mll"
         ( TOK_MINUS )
# 291 "_build/U_lexer.ml"

  | 10 ->
# 81 "src/U_lexer.mll"
         ( TOK_EXCLAIM )
# 296 "_build/U_lexer.ml"

  | 11 ->
# 82 "src/U_lexer.mll"
         ( TOK_DIVIDE )
# 301 "_build/U_lexer.ml"

  | 12 ->
# 83 "src/U_lexer.mll"
         ( TOK_LESS )
# 306 "_build/U_lexer.ml"

  | 13 ->
# 84 "src/U_lexer.mll"
         ( TOK_GREATER )
# 311 "_build/U_lexer.ml"

  | 14 ->
# 85 "src/U_lexer.mll"
         ( TOK_LESS_EQUAL )
# 316 "_build/U_lexer.ml"

  | 15 ->
# 86 "src/U_lexer.mll"
         ( TOK_GREATER_EQUAL )
# 321 "_build/U_lexer.ml"

  | 16 ->
# 87 "src/U_lexer.mll"
         ( TOK_EQUAL_EQUAL )
# 326 "_build/U_lexer.ml"

  | 17 ->
# 88 "src/U_lexer.mll"
         ( TOK_NOT_EQUAL )
# 331 "_build/U_lexer.ml"

  | 18 ->
# 89 "src/U_lexer.mll"
         ( TOK_AND_AND )
# 336 "_build/U_lexer.ml"

  | 19 ->
# 90 "src/U_lexer.mll"
         ( TOK_BAR )
# 341 "_build/U_lexer.ml"

  | 20 ->
# 91 "src/U_lexer.mll"
         ( TOK_BAR_BAR )
# 346 "_build/U_lexer.ml"

  | 21 ->
# 92 "src/U_lexer.mll"
         ( TOK_SEMICOLON )
# 351 "_build/U_lexer.ml"

  | 22 ->
# 93 "src/U_lexer.mll"
         ( TOK_COMMA )
# 356 "_build/U_lexer.ml"

  | 23 ->
# 94 "src/U_lexer.mll"
         ( TOK_EQUAL )
# 361 "_build/U_lexer.ml"

  | 24 ->
# 95 "src/U_lexer.mll"
         ( TOK_CONCAT )
# 366 "_build/U_lexer.ml"

  | 25 ->
let
# 98 "src/U_lexer.mll"
                  c
# 372 "_build/U_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 98 "src/U_lexer.mll"
                    ( TOK_int c  )
# 376 "_build/U_lexer.ml"

  | 26 ->
let
# 99 "src/U_lexer.mll"
                  r
# 382 "_build/U_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 99 "src/U_lexer.mll"
                    ( TOK_real r )
# 386 "_build/U_lexer.ml"

  | 27 ->
# 102 "src/U_lexer.mll"
       ( comment lexbuf; token lexbuf )
# 391 "_build/U_lexer.ml"

  | 28 ->
# 103 "src/U_lexer.mll"
       ( stringer (Buffer.create 12) lexbuf)
# 396 "_build/U_lexer.ml"

  | 29 ->
# 104 "src/U_lexer.mll"
        ( character (Buffer.create 12) lexbuf)
# 401 "_build/U_lexer.ml"

  | 30 ->
# 105 "src/U_lexer.mll"
                      ( token lexbuf )
# 406 "_build/U_lexer.ml"

  | 31 ->
# 106 "src/U_lexer.mll"
          ( new_line lexbuf; token lexbuf )
# 411 "_build/U_lexer.ml"

  | 32 ->
# 107 "src/U_lexer.mll"
        ( token lexbuf )
# 416 "_build/U_lexer.ml"

  | 33 ->
# 110 "src/U_lexer.mll"
      ( TOK_EOF )
# 421 "_build/U_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 45
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 115 "src/U_lexer.mll"
       ( () )
# 433 "_build/U_lexer.ml"

  | 1 ->
# 116 "src/U_lexer.mll"
                ( comment lexbuf )
# 438 "_build/U_lexer.ml"

  | 2 ->
# 117 "src/U_lexer.mll"
          ( new_line lexbuf; comment lexbuf )
# 443 "_build/U_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and stringer buf lexbuf =
   __ocaml_lex_stringer_rec buf lexbuf 51
and __ocaml_lex_stringer_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 120 "src/U_lexer.mll"
       ( TOK_string( Buffer.contents buf ) )
# 455 "_build/U_lexer.ml"

  | 1 ->
# 121 "src/U_lexer.mll"
            ( Buffer.add_string buf (Lexing.lexeme lexbuf) ; stringer buf lexbuf )
# 460 "_build/U_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_stringer_rec buf lexbuf __ocaml_lex_state

and character buf lexbuf =
   __ocaml_lex_character_rec buf lexbuf 54
and __ocaml_lex_character_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 124 "src/U_lexer.mll"
       ( TOK_char( character_of_string (Buffer.contents buf)) )
# 472 "_build/U_lexer.ml"

  | 1 ->
# 125 "src/U_lexer.mll"
            ( Buffer.add_string buf (Lexing.lexeme lexbuf) ; character buf lexbuf )
# 477 "_build/U_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_character_rec buf lexbuf __ocaml_lex_state

;;

