variables:
  GROUP: "mopsa"
  MOPSA_C: "./bin/mopsa-c -unittest"
  MOPSA_U: "./bin/mopsa-universal -unittest"
  MOPSA_PYTYP: "./bin/mopsa-python-types -unittest -unittest-filter=test_types"
  MOPSA_PYVAL: "./bin/mopsa-python       -unittest -unittest-filter=test_values"
  DOCKER_DRIVER: overlay2
  GIT_STRATEGY: fetch
  RUN_BENCHMARKS: "false"
  UPDATE_DOCKER: "false"
  DISABLE_MOPSA_DIFF : "false"

image: mopsa/mopsa-build:latest

stages:
- build
- test
- benchmarks
- downstream_benchmarks
- publish

build_job:
  stage: build
  script:
    - eval `opam config env`
    - ./configure
    - make -j
  artifacts:
    paths:
    - ./bin/
    - ./_build/default/parsers/c/bin/build_wrapper.exe
    - ./_build/default/analyzer/mopsa.exe
    expire_in: 2h


###########################################################
# Trigger downstream benchmarks in case of merge requests #
###########################################################
.downstream-benchs:
  stage: downstream_benchmarks
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      variables:
       GIT_REPO: "gitlab.com/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git"
       BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: $RUN_BENCHMARKS == "true"
      when: manual
      variables:
        GIT_REPO: "gitlab.com/${CI_PROJECT_PATH}.git"
        BRANCH: $CI_COMMIT_REF_NAME
  # trigger:
  #   project: $PROJECT_NAME
  #   branch: $PROJECT_BRANCH
  script:
    - PROJECT_NAME=$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$PROJECT_NAME")
    - PROJECT_BRANCH=$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$PROJECT_BRANCH")
    - echo $PROJECT_NAME $PROJECT_BRANCH $GIT_REPO $BRANCH
    - curl --form "token=$CI_JOB_TOKEN" --form "ref=$PROJECT_BRANCH" --form "variables[GIT_REPO]=$GIT_REPO" --form "variables[BRANCH]=$BRANCH" --form "variables[DISABLE_MOPSA_DIFF]=$DISABLE_MOPSA_DIFF" "https://gitlab.com/api/v4/projects/$PROJECT_NAME/trigger/pipeline"


downstream-benchs 1/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/coreutils-benchmarks
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 2/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/juliet-benchmarks
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 3/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/pathpicker-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 4/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/pyperformance-benchmarks
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 5/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/cpython-benchmarks/cdistance-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 6/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/cpython-benchmarks/pyahocorasick-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 7/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/cpython-benchmarks/noise-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 8/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/cpython-benchmarks/levenshtein-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 9/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/cpython-benchmarks/llist-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs

downstream-benchs 10/10:
  variables:
    PROJECT_NAME: ${GROUP}/benchmarks/cpython-benchmarks/bitarray-analysis
    PROJECT_BRANCH: main
  extends: .downstream-benchs


###########
# C tests #
###########

test-c:
  stage: test
  dependencies: [build_job]
  variables:
    C_FILES: 'array_tests.c goto_tests.c libc/errno_tests.c libc/malloc_tests.c libc/builtin_constant_p_tests.c libc/file_tests.c libc/alloca_tests.c libc/variadic_tests.c libc/free_tests.c libc/memcpy_tests.c switch_tests.c  bitshift_tests.c enum_tests.c cond_expr_tests.c function_tests.c  for_tests.c struct_tests.c stubs/macro_tests.c stubs/case_tests.c stubs/directive_tests.c stubs/local_tests.c  stubs/alias_tests.c stubs/assigns_tests.c stubs/global_predicate_tests.c stubs/implies_tests.c stubs/builtins_tests.c stubs/memory_resource_tests.c union_tests.c string_tests.c float_tests.c int_tests.c pointer_tests.c'
  script:
    - eval `opam config env`
    - |
      for C_FILE in $C_FILES
        do
          echo $C_FILE
          $MOPSA_C analyzer/tests/c/$C_FILE
        done
    - $MOPSA_C -config=c/cell-rel-itv.json analyzer/tests/c/libc/builtin_overflow_tests.c
    - $MOPSA_C -config=c/cell-string-length-itv.json analyzer/tests/c/libc/vasprintf_tests.c
    - $MOPSA_C -config=c/cell-string-length-pointer-sentinel-itv.json -c-symbolic-args=0 analyzer/tests/c/ptr_sentinel_tests.c
    - $MOPSA_C -c-check-overflows-with-relational -config=c/cell-rel-itv.json analyzer/tests/c/156_overflow_relational.c
    - $MOPSA_C analyzer/tests/c/172_backward_mul_floatitv.c
    - $MOPSA_C analyzer/tests/c/176_do_while_constant_cond.c

###################
# Universal tests #
###################


test-u:
  stage: test
  dependencies: [build_job]
  variables:
    U_FILES: 'int_tests.u function_tests.u loop_tests.u'
  script:
    - eval `opam config env`
    - |
      for U_FILE in $U_FILES
        do
          echo $U_FILE
          $MOPSA_U analyzer/tests/universal/$U_FILE
        done

################
# Python tests #
################


test-pyty:
  stage: test
  dependencies: [build_job]
  variables:
    PY_FILES: 'int_tests.py misc_tests.py exception_tests.py'
  script:
    - eval `opam config env`
    - |
      for PY_FILE in $PY_FILES
        do
          echo $PY_FILE
          ./bin/mopsa-python-types -unittest analyzer/tests/python/types/$PY_FILE
        done

test-py:
  stage: test
  dependencies: [build_job]
  variables:
    PY_FILES: 'bool_tests.py builtins_tests.py class_tests.py dict_tests.py exception_tests.py float_tests.py function_tests.py generator_tests.py int_tests.py iter_assign_tests.py loop_tests.py misc_tests.py operator_tests.py str_tests.py with_tests.py'
  script:
    - eval `opam config env`
    - |
      for PY_FILE in $PY_FILES
        do
          echo $PY_FILE
          ./bin/mopsa-python -unittest analyzer/tests/python/$PY_FILE
        done


test-py-no-unittest:
  stage: test
  dependencies: [build_job]
  variables:
    PY_FILES: 'list_tests.py import_tests.py'
  script:
    - eval `opam config env`
    - cd analyzer/tests/python
    - |
      for PY_FILE in $PY_FILES
        do
          echo $PY_FILE
          ../../../bin/mopsa-python -silent $PY_FILE
        done

test-typpete:
  stage: test
  dependencies: [build_job]
  variables:
    PY_FILES: 'bellman_ford.py builtins_test.py callable_class.py callable_interface_generic.py classes.py class_pre_store.py comparison_test.py cookie.py coop_concatenate.py crafting_challenge.py deceitful.py default_args_class.py dict_methods.py disjoint_sets.py eight_queens.py except_clause.py explicit_object_superclass.py expressions1.py expressions2.py expressions.py factorization.py file_download.py functions.py generic_class_test.py guess_the_number.py inheritance_cov_incorrect.py inheritance_cov_sat.py isinstance.py linear_equality.py list_methods.py magic.py math_test.py mro.py mult_inheritance.py override_default_args_correct.py prog_1.py prog_2.py statements.py staticmethod.py str_methods.py stubs_default_args.py syntax.py unary_test_not.py'
  script:
    - eval `opam config env`
    - |
      for PY_FILE in $PY_FILES
        do
          echo $PY_FILE
          $MOPSA_PYTYP -gc benchmarks/python/typpete/$PY_FILE
        done

#################
# CPython tests #
#################

.test-cpython:
  stage: test
  dependencies: [build_job]
  script:
    - eval `opam config env`
    - echo $CPY_FILE
    - echo $PWD
    - cd analyzer/tests/cpython
    - ../../../bin/mopsa-build python3 setup.py build --force
    - ../../../bin/mopsa-cpython $CPY_FILE > log || true
    - grep "Assertion failure. $NB_CHECKS total, .*$NB_SAFE safe" log || (cat log && false)

test-cpython 1/1:
  variables:
    CPY_FILE: 'basic_tests.py'
    NB_CHECKS: '141'
    NB_SAFE: '140'
  extends: .test-cpython

###########################
# Interactive engine test #
###########################

test-interactive:
  stage: test
  dependencies: [build_job]
  script:
    - eval `opam config env`
    - echo $PWD
    - cd analyzer/tests/c/
    - echo "load script interactive.script" | ../../../bin/mopsa-c -silent -engine=interactive interactive.c | tee out
    - head -n 52 out | tail -n 48 > out.out
    - diff <(sed "16,17,28d" out.out) <(sed "16,17,28d" interactive.out)



#####################
# Push to dockerhub #
#####################

publish_docker:
  stage: publish
  rules:
    - if: $UPDATE_DOCKER == "true"
      when: manual
  before_script:
    - echo "$DOCKERIO_PASSWD" | docker login -u $DOCKERIO_USER --password-stdin docker.io
  script:
    - cd docker/analyzer
    - docker build --pull -t mopsa/mopsa-analyzer:main .
    - docker push mopsa/mopsa-analyzer:main

##################################
# Documentation from the manuals #
##################################

pages:
  stage: publish
  image: sphinxdoc/sphinx:latest
  script:
    - pip install sphinx_rtd_theme
    - cd doc/user-manual && make html && cd ../..
    - cd doc/developer-manual && make html && cd ../..
    - cd doc/reference-manual && make html && cd ../..
    - mkdir public
    - mkdir public/user-manual
    - cp -r doc/user-manual/_build/html/* public/user-manual/
    - mkdir public/developer-manual
    - cp -r doc/developer-manual/_build/html/* public/developer-manual/
    - mkdir public/reference-manual
    - cp -r doc/reference-manual/_build/html/* public/reference-manual/
  artifacts:
    paths:
      - public
  only:
    variables:
    - $CI_PIPELINE_SOURCE == "web"
    - $CI_COMMIT_REF_NAME == "main"
